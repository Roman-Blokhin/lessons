#Списки (list) используются для хранения элементов.
#Список создается с помощью квадратных скобок и запятых, разделяющих элементы.

#Элемент списка может быть вызван с помощью его индекса, указанного в квадратных скобках.

# элементы списков начинаются с 0 и прописываются строго в квадратных скобках

words = ["Hello", "world", "!"]
print(words[0])
print(words[2])
print(words[2])  

# можно создавать пустые списки@ чтобы в дальнейшем поместить в них данные

empty_list = []
print(empty_list) 

# в списке могут указываттся разные типы данных (str, int, float), так же можно делать список в списке, такой список занимает порядковый номер и выводится целиком, а если нужно вывести определенный элемент списка в списке, указывается 2 числа, каждое в квадратных скобках

age = 18
some = [56, 43.0, "hero", ["word", age, 1.09], 9]

print(some [1])
print(some [2])
print(some [3])
print(some [3] [1])
print(some [4])

# запись может быть в двумерной матрице, когда в дальнейшем нужно переоьразовать в таблицу или выделить строки-колонки:

m = [
    [1, 2, 3],
    [4, 5, 6]
    ]
    
print(m[1][2])   

# строку можно разбить на индексы и проиндексировать каждую букву и символ, символы ("") - тоже индексируются и им присвается порядковый номер от нуля
str = "Hello world!"
print(str[6])

#Вы можете переназначить один элемент списка на элемент другого типа

age = [1,1,1,1]
age [3] = "hero"
print (age)

# списки можно умножать искладывать как и строки

nums = [1, 2, 3]
print(nums + [4, 5, 6])
print(nums * 3) 

# так как строка является списком символов, мы можем проверить наличие определенных элементов с помощью оператора in, и программа выведет нам ответ True, если элемент есть, и False , если его нет

num = "roma is a hero"
print (num [1])
print ("t" in num)
print ("o" in num)

#чтобы проверить, что элемент действительно не находится в списке, используется оператор not

age = [18, 4, 76, 103, 50]
print (not 2 in age)
print (not 18 in age)